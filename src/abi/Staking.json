{
  "address": "0x36D0578685A4bCbd9172CA4D3C46347B3b203B1C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "addAllowedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allowedTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_client",
          "type": "address"
        }
      ],
      "name": "getStakerIndex",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getUserSingleTokenUSDValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserTotalUSDValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "isTokenAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issueTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfStakers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rug",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakingBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPriceFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniqueTokensStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa7512463811203215348c04275de3422b0af2aa1c5c62592a4fcd6538e8cc662",
  "receipt": {
    "to": null,
    "from": "0xBD8Ee4e2Ff7Cfcdf5546B2a2B7a03240f0Bd1D3D",
    "contractAddress": "0x36D0578685A4bCbd9172CA4D3C46347B3b203B1C",
    "transactionIndex": 8,
    "gasUsed": "2360874",
    "logsBloom": "0x
    "blockHash": "0xcc3e66292f156232685d774cee61b8814c0653b4b58b0465a1525984cb2295bc",
    "transactionHash": "0xa7512463811203215348c04275de3422b0af2aa1c5c62592a4fcd6538e8cc662",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 9938686,
        "transactionHash": "0xa7512463811203215348c04275de3422b0af2aa1c5c62592a4fcd6538e8cc662",
        "address": "0x36D0578685A4bCbd9172CA4D3C46347B3b203B1C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd8ee4e2ff7cfcdf5546b2a2b7a03240f0bd1d3d"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xcc3e66292f156232685d774cee61b8814c0653b4b58b0465a1525984cb2295bc"
      }
    ],
    "blockNumber": 9938686,
    "cumulativeGasUsed": "3582092",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6b314839ed0980cd8159deb4377ccf31",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"addAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_client\",\"type\":\"address\"}],\"name\":\"getStakerIndex\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getUserSingleTokenUSDValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserTotalUSDValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isTokenAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniqueTokensStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/* DESCRIPTION\\n- Users can deposit approved tokens into the contract, such as fake BTC/ETH/DAI ERC20 tokens into the contract\\n- owner can issue staking rewards to be paid for in wei. 1 wei for each usd value of the tokens staked \\n- users can stake and unstake at any time\\n*/\\n\\ncontract Staking is Ownable {\\n    using Address for address payable;\\n\\n    mapping(IERC20 => mapping(address => uint256)) public stakingBalances; // ?: token to user to balance\\n    mapping(address => uint256) public uniqueTokensStaked; // ?: user address => num of unique tokens\\n    mapping(IERC20 => address) public tokenPriceFeed; // ?: if a token addresses with price feeds are allowed tokens\\n    address[] public stakers; // ?: each staker needs to have at least 1 token staked. pop() address from array once a user unstakes all of his tokens\\n    IERC20[] public allowedTokens;\\n\\n    // constructor() {}\\n\\n    function numberOfStakers() public view returns (uint256) {\\n        return stakers.length;\\n    }\\n\\n    function numberOfAllowedTokens() public view returns (uint256) {\\n        return allowedTokens.length;\\n    }\\n\\n    function isTokenAllowed(IERC20 _tokenAddress) public view returns (bool) {\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            if (_tokenAddress == allowedTokens[i]) return true;\\n        }\\n        return false;\\n    }\\n\\n    modifier tokenIsAllowed(IERC20 _tokenAddress) {\\n        require(isTokenAllowed(_tokenAddress), \\\"Token is not allowed\\\");\\n        _;\\n    }\\n\\n    function getStakerIndex(address _client) public view returns (int256) {\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            if (stakers[i] == _client) return int256(i); // ?: return the index if _client is a staker\\n        }\\n\\n        return -1; // ?: return -1 if _client is not a staker\\n    }\\n\\n    // !: approval needs to be done before this function is called\\n    function stakeTokens(IERC20 _tokenAddress, uint256 _amount) public tokenIsAllowed(_tokenAddress) {\\n        require(_amount > 0, \\\"Staking amount must be greater than 0\\\");\\n        // ?: allowance check is done in the transferFrom function\\n        IERC20(_tokenAddress).transferFrom(_msgSender(), address(this), _amount);\\n\\n        // ?: if msg.sender is not already a staker, add him to stakers[] and set uniqueTokensStaked to 1 since it's his first token\\n        if (getStakerIndex(_msgSender()) == -1) {\\n            stakers.push(_msgSender());\\n        }\\n\\n        // ?: if you have no _tokenAddress staked, increase uniqueTokensStaked by 1.\\n        if (stakingBalances[_tokenAddress][_msgSender()] == 0) {\\n            uniqueTokensStaked[_msgSender()] += 1;\\n        }\\n\\n        stakingBalances[_tokenAddress][_msgSender()] += _amount;\\n    }\\n\\n    function unstakeTokens(IERC20 _tokenAddress, uint256 _amount) public tokenIsAllowed(_tokenAddress) {\\n        require(_amount > 0, \\\"Staking amount must be greater than 0\\\");\\n        require(stakingBalances[_tokenAddress][_msgSender()] >= _amount, \\\"Staked balance is lower than unstaking amount\\\");\\n\\n        stakingBalances[_tokenAddress][_msgSender()] -= _amount;\\n\\n        // ?: if this user no longer has any of this token staked, decrease uniqueTokensStaked\\n        if (stakingBalances[_tokenAddress][_msgSender()] == 0) {\\n            uniqueTokensStaked[_msgSender()] -= 1;\\n        }\\n\\n        // ?: if the user has no more unique tokens after unstaking this one, remove him from the stakers[]\\n        int256 stakerIndex = getStakerIndex(_msgSender());\\n        if (uniqueTokensStaked[_msgSender()] == 0 && (stakerIndex != -1)) {\\n            stakers[uint256(stakerIndex)] = stakers[stakers.length - 1];\\n            stakers.pop();\\n        }\\n\\n        IERC20(_tokenAddress).transfer(_msgSender(), _amount);\\n    }\\n\\n    function addAllowedToken(IERC20 _tokenAddress, address _oracleAddress) public onlyOwner {\\n        if (!isTokenAllowed(_tokenAddress)) {\\n            allowedTokens.push(_tokenAddress);\\n        }\\n        tokenPriceFeed[_tokenAddress] = _oracleAddress;\\n    }\\n\\n    // TODO: removeAllowedToken: Can only remove if\\n\\n    function getTokenValue(IERC20 _tokenAddress)\\n        public\\n        view\\n        tokenIsAllowed(_tokenAddress)\\n        returns (int256 price, uint8 decimals)\\n    {\\n        address priceFeedAddress = tokenPriceFeed[_tokenAddress];\\n        AggregatorV3Interface oracle = AggregatorV3Interface(priceFeedAddress);\\n\\n        (, price, , , ) = oracle.latestRoundData();\\n        decimals = oracle.decimals();\\n    }\\n\\n    function getUserSingleTokenUSDValue(address _user, IERC20 _tokenAddress)\\n        public\\n        view\\n        tokenIsAllowed(_tokenAddress)\\n        returns (uint256)\\n    {\\n        uint256 userTokenBalance = stakingBalances[_tokenAddress][_user];\\n        if (userTokenBalance == 0) return 0;\\n\\n        (int256 price, uint8 decimals) = getTokenValue(_tokenAddress);\\n        // ?: userTokenBalance has 18 decimals, so divide it by 10**18.\\n        // ?: price from the oracle has <decimals> number of decimals, so divide by 10**decimals\\n        return (uint256(price) * userTokenBalance) / (10**decimals) / (10**18);\\n    }\\n\\n    function getUserTotalUSDValue(address _user) public view returns (uint256) {\\n        if (uniqueTokensStaked[_user] == 0) return 0; // ?: if no tokens staked, value=0\\n\\n        uint256 totalUSDValue = 0;\\n        for (uint256 i = 0; i < allowedTokens.length; i++) {\\n            totalUSDValue += getUserSingleTokenUSDValue(_user, allowedTokens[i]);\\n        }\\n\\n        return totalUSDValue;\\n    }\\n\\n    // ?: in wei, since the reward is 1 wei for $1 of staked token USD value\\n    function totalStakingRewards() public view returns (uint256) {\\n        uint256 total = 0;\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            total += getUserTotalUSDValue(stakers[i]);\\n        }\\n\\n        return total;\\n    }\\n\\n    // !: extremely gas inefficient way to issue tokens\\n    function issueTokens() public onlyOwner {\\n        require(address(this).balance >= totalStakingRewards(), \\\"Contract has insufficient ETH for token issuance\\\");\\n\\n        for (uint256 i = 0; i < stakers.length; i++) {\\n            address recipient = stakers[i];\\n            uint256 userTotalUSDValue = getUserTotalUSDValue(recipient);\\n\\n            payable(recipient).sendValue(userTotalUSDValue); // ?: 1 wei for each USD that their tokens are worth\\n        }\\n    }\\n\\n    event Received(address, uint256);\\n\\n    receive() external payable {\\n        emit Received(msg.sender, msg.value);\\n    }\\n\\n    function contractEthBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    // ?: return all eth back to the owner\\n    function rug() public onlyOwner {\\n        payable(owner()).sendValue(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0xa9cba0925bbdb9e5c39c14961780a31fc959542136cbee69eb8413640f129543\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61296780620001146000396000f3fe6080604052600436106101385760003560e01c80639878cbb3116100ab578063e89a173e1161006f578063e89a173e1461047f578063e9be02aa146104a8578063f1c5d6c2146104bf578063f2fde38b146104fd578063f9eaee0d14610526578063fd5e6dd11461056357610178565b80639878cbb314610360578063b4c438691461039d578063b83e0234146103c8578063d39d81fc14610405578063e41389121461044257610178565b80635eabf577116100fd5780635eabf5771461028857806360ab5852146102b3578063715018a6146102ca57806379a83f5a146102e15780638da5cb5b1461030a57806393ef357a1461033557610178565b8062ca8af71461017d578063276cc718146101ba578063305e94cd146101f75780635d58ce36146102205780635e5f2e261461024b57610178565b36610178577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874333460405161016e929190611bd3565b60405180910390a1005b600080fd5b34801561018957600080fd5b506101a4600480360381019061019f9190611c2d565b6105a0565b6040516101b19190611c73565b60405180910390f35b3480156101c657600080fd5b506101e160048036038101906101dc9190611ccc565b61066d565b6040516101ee9190611d0c565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190611d27565b61079f565b005b34801561022c57600080fd5b5061023561090e565b6040516102429190611d0c565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d9190611d93565b610916565b60405161027f9190611e1f565b60405180910390f35b34801561029457600080fd5b5061029d610955565b6040516102aa9190611d0c565b60405180910390f35b3480156102bf57600080fd5b506102c8610962565b005b3480156102d657600080fd5b506102df610ac9565b005b3480156102ed57600080fd5b5061030860048036038101906103039190611e3a565b610b51565b005b34801561031657600080fd5b5061031f610e91565b60405161032c9190611e7a565b60405180910390f35b34801561034157600080fd5b5061034a610eba565b6040516103579190611d0c565b60405180910390f35b34801561036c57600080fd5b5061038760048036038101906103829190611e95565b610f40565b6040516103949190611e7a565b60405180910390f35b3480156103a957600080fd5b506103b2610f73565b6040516103bf9190611d0c565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea9190611c2d565b610f80565b6040516103fc9190611d0c565b60405180910390f35b34801561041157600080fd5b5061042c60048036038101906104279190611d27565b610f98565b6040516104399190611d0c565b60405180910390f35b34801561044e57600080fd5b5061046960048036038101906104649190611c2d565b610fbd565b6040516104769190611d0c565b60405180910390f35b34801561048b57600080fd5b506104a660048036038101906104a19190611e3a565b611093565b005b3480156104b457600080fd5b506104bd611579565b005b3480156104cb57600080fd5b506104e660048036038101906104e19190611e95565b611627565b6040516104f4929190611ede565b60405180910390f35b34801561050957600080fd5b50610524600480360381019061051f9190611c2d565b6117d3565b005b34801561053257600080fd5b5061054d60048036038101906105489190611e95565b6118cb565b60405161055a9190611f22565b60405180910390f35b34801561056f57600080fd5b5061058a60048036038101906105859190611d93565b61197a565b6040516105979190611e7a565b60405180910390f35b600080600090505b600480549050811015610643578273ffffffffffffffffffffffffffffffffffffffff16600482815481106105e0576105df611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106305780915050610668565b808061063b90611f9b565b9150506105a8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b919050565b600081610679816118cb565b6106b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106af90612041565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561074c576000925050610798565b60008061075886611627565b91509150670de0b6b3a764000081600a6107729190612194565b848461077e91906121df565b6107889190612268565b6107929190612268565b94505050505b5092915050565b6107a76119b9565b73ffffffffffffffffffffffffffffffffffffffff166107c5610e91565b73ffffffffffffffffffffffffffffffffffffffff161461081b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610812906122e5565b60405180910390fd5b610824826118cb565b61088c576005829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600047905090565b6005818154811061092657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600480549050905090565b61096a6119b9565b73ffffffffffffffffffffffffffffffffffffffff16610988610e91565b73ffffffffffffffffffffffffffffffffffffffff16146109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d5906122e5565b60405180910390fd5b6109e6610eba565b471015610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f90612377565b60405180910390fd5b60005b600480549050811015610ac657600060048281548110610a4e57610a4d611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610a8682610fbd565b9050610ab1818373ffffffffffffffffffffffffffffffffffffffff166119c190919063ffffffff16565b50508080610abe90611f9b565b915050610a2b565b50565b610ad16119b9565b73ffffffffffffffffffffffffffffffffffffffff16610aef610e91565b73ffffffffffffffffffffffffffffffffffffffff1614610b45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3c906122e5565b60405180910390fd5b610b4f6000611ab5565b565b81610b5b816118cb565b610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9190612041565b60405180910390fd5b60008211610bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd490612409565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd610c016119b9565b30856040518463ffffffff1660e01b8152600401610c2193929190612429565b6020604051808303816000875af1158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c64919061248c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610c96610c916119b9565b6105a0565b1415610d07576004610ca66119b9565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610d526119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610df257600160026000610da16119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dea91906124b9565b925050819055505b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610e3c6119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e8591906124b9565b92505081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000905060005b600480549050811015610f3857610f1860048281548110610ee857610ee7611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610fbd565b82610f2391906124b9565b91508080610f3090611f9b565b915050610ec4565b508091505090565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600580549050905090565b60026020528060005260406000206000915090505481565b6001602052816000526040600020602052806000526040600020600091509150505481565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561100f576000905061108e565b6000805b60058054905081101561108857611068846005838154811061103857611037611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661066d565b8261107391906124b9565b9150808061108090611f9b565b915050611013565b50809150505b919050565b8161109d816118cb565b6110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390612041565b60405180910390fd5b6000821161111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111690612409565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006111696119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dc90612581565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061122f6119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127891906125a1565b925050819055506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006112ca6119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561136a576001600260006113196119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461136291906125a1565b925050819055505b600061137c6113776119b9565b6105a0565b905060006002600061138c6119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156113f457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b156114ed576004600160048054905061140d91906125a1565b8154811061141e5761141d611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166004828154811061145d5761145c611f3d565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060048054806114b7576114b66125d5565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6115116119b9565b856040518363ffffffff1660e01b815260040161152f929190611bd3565b6020604051808303816000875af115801561154e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611572919061248c565b5050505050565b6115816119b9565b73ffffffffffffffffffffffffffffffffffffffff1661159f610e91565b73ffffffffffffffffffffffffffffffffffffffff16146115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec906122e5565b60405180910390fd5b61162547611601610e91565b73ffffffffffffffffffffffffffffffffffffffff166119c190919063ffffffff16565b565b60008082611634816118cb565b611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166a90612041565b60405180910390fd5b6000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190612687565b9091929350909150905050809550508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c9919061272e565b9350505050915091565b6117db6119b9565b73ffffffffffffffffffffffffffffffffffffffff166117f9610e91565b73ffffffffffffffffffffffffffffffffffffffff161461184f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611846906122e5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b6906127cd565b60405180910390fd5b6118c881611ab5565b50565b600080600090505b60058054905081101561196f57600581815481106118f4576118f3611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561195c576001915050611975565b808061196790611f9b565b9150506118d3565b50600090505b919050565b6004818154811061198a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b80471015611a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fb90612839565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611a2a9061288a565b60006040518083038185875af1925050503d8060008114611a67576040519150601f19603f3d011682016040523d82523d6000602084013e611a6c565b606091505b5050905080611ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa790612911565b60405180910390fd5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ba482611b79565b9050919050565b611bb481611b99565b82525050565b6000819050919050565b611bcd81611bba565b82525050565b6000604082019050611be86000830185611bab565b611bf56020830184611bc4565b9392505050565b600080fd5b611c0a81611b99565b8114611c1557600080fd5b50565b600081359050611c2781611c01565b92915050565b600060208284031215611c4357611c42611bfc565b5b6000611c5184828501611c18565b91505092915050565b6000819050919050565b611c6d81611c5a565b82525050565b6000602082019050611c886000830184611c64565b92915050565b6000611c9982611b99565b9050919050565b611ca981611c8e565b8114611cb457600080fd5b50565b600081359050611cc681611ca0565b92915050565b60008060408385031215611ce357611ce2611bfc565b5b6000611cf185828601611c18565b9250506020611d0285828601611cb7565b9150509250929050565b6000602082019050611d216000830184611bc4565b92915050565b60008060408385031215611d3e57611d3d611bfc565b5b6000611d4c85828601611cb7565b9250506020611d5d85828601611c18565b9150509250929050565b611d7081611bba565b8114611d7b57600080fd5b50565b600081359050611d8d81611d67565b92915050565b600060208284031215611da957611da8611bfc565b5b6000611db784828501611d7e565b91505092915050565b6000819050919050565b6000611de5611de0611ddb84611b79565b611dc0565b611b79565b9050919050565b6000611df782611dca565b9050919050565b6000611e0982611dec565b9050919050565b611e1981611dfe565b82525050565b6000602082019050611e346000830184611e10565b92915050565b60008060408385031215611e5157611e50611bfc565b5b6000611e5f85828601611cb7565b9250506020611e7085828601611d7e565b9150509250929050565b6000602082019050611e8f6000830184611bab565b92915050565b600060208284031215611eab57611eaa611bfc565b5b6000611eb984828501611cb7565b91505092915050565b600060ff82169050919050565b611ed881611ec2565b82525050565b6000604082019050611ef36000830185611c64565b611f006020830184611ecf565b9392505050565b60008115159050919050565b611f1c81611f07565b82525050565b6000602082019050611f376000830184611f13565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fa682611bba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611fd957611fd8611f6c565b5b600182019050919050565b600082825260208201905092915050565b7f546f6b656e206973206e6f7420616c6c6f776564000000000000000000000000600082015250565b600061202b601483611fe4565b915061203682611ff5565b602082019050919050565b6000602082019050818103600083015261205a8161201e565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156120b85780860481111561209457612093611f6c565b5b60018516156120a35780820291505b80810290506120b185612061565b9450612078565b94509492505050565b6000826120d1576001905061218d565b816120df576000905061218d565b81600181146120f557600281146120ff5761212e565b600191505061218d565b60ff84111561211157612110611f6c565b5b8360020a91508482111561212857612127611f6c565b5b5061218d565b5060208310610133831016604e8410600b84101617156121635782820a90508381111561215e5761215d611f6c565b5b61218d565b612170848484600161206e565b9250905081840481111561218757612186611f6c565b5b81810290505b9392505050565b600061219f82611bba565b91506121aa83611ec2565b92506121d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846120c1565b905092915050565b60006121ea82611bba565b91506121f583611bba565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561222e5761222d611f6c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061227382611bba565b915061227e83611bba565b92508261228e5761228d612239565b5b828204905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006122cf602083611fe4565b91506122da82612299565b602082019050919050565b600060208201905081810360008301526122fe816122c2565b9050919050565b7f436f6e74726163742068617320696e73756666696369656e742045544820666f60008201527f7220746f6b656e2069737375616e636500000000000000000000000000000000602082015250565b6000612361603083611fe4565b915061236c82612305565b604082019050919050565b6000602082019050818103600083015261239081612354565b9050919050565b7f5374616b696e6720616d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b60006123f3602583611fe4565b91506123fe82612397565b604082019050919050565b60006020820190508181036000830152612422816123e6565b9050919050565b600060608201905061243e6000830186611bab565b61244b6020830185611bab565b6124586040830184611bc4565b949350505050565b61246981611f07565b811461247457600080fd5b50565b60008151905061248681612460565b92915050565b6000602082840312156124a2576124a1611bfc565b5b60006124b084828501612477565b91505092915050565b60006124c482611bba565b91506124cf83611bba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561250457612503611f6c565b5b828201905092915050565b7f5374616b65642062616c616e6365206973206c6f776572207468616e20756e7360008201527f74616b696e6720616d6f756e7400000000000000000000000000000000000000602082015250565b600061256b602d83611fe4565b91506125768261250f565b604082019050919050565b6000602082019050818103600083015261259a8161255e565b9050919050565b60006125ac82611bba565b91506125b783611bba565b9250828210156125ca576125c9611f6c565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600069ffffffffffffffffffff82169050919050565b61262381612604565b811461262e57600080fd5b50565b6000815190506126408161261a565b92915050565b61264f81611c5a565b811461265a57600080fd5b50565b60008151905061266c81612646565b92915050565b60008151905061268181611d67565b92915050565b600080600080600060a086880312156126a3576126a2611bfc565b5b60006126b188828901612631565b95505060206126c28882890161265d565b94505060406126d388828901612672565b93505060606126e488828901612672565b92505060806126f588828901612631565b9150509295509295909350565b61270b81611ec2565b811461271657600080fd5b50565b60008151905061272881612702565b92915050565b60006020828403121561274457612743611bfc565b5b600061275284828501612719565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127b7602683611fe4565b91506127c28261275b565b604082019050919050565b600060208201905081810360008301526127e6816127aa565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000612823601d83611fe4565b915061282e826127ed565b602082019050919050565b6000602082019050818103600083015261285281612816565b9050919050565b600081905092915050565b50565b6000612874600083612859565b915061287f82612864565b600082019050919050565b600061289582612867565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b60006128fb603a83611fe4565b91506129068261289f565b604082019050919050565b6000602082019050818103600083015261292a816128ee565b905091905056fea2646970667358221220720978ec049d1dd4b6eb76fe68830b1cf026fd14fa60103180eae73c5655419164736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101385760003560e01c80639878cbb3116100ab578063e89a173e1161006f578063e89a173e1461047f578063e9be02aa146104a8578063f1c5d6c2146104bf578063f2fde38b146104fd578063f9eaee0d14610526578063fd5e6dd11461056357610178565b80639878cbb314610360578063b4c438691461039d578063b83e0234146103c8578063d39d81fc14610405578063e41389121461044257610178565b80635eabf577116100fd5780635eabf5771461028857806360ab5852146102b3578063715018a6146102ca57806379a83f5a146102e15780638da5cb5b1461030a57806393ef357a1461033557610178565b8062ca8af71461017d578063276cc718146101ba578063305e94cd146101f75780635d58ce36146102205780635e5f2e261461024b57610178565b36610178577f88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874333460405161016e929190611bd3565b60405180910390a1005b600080fd5b34801561018957600080fd5b506101a4600480360381019061019f9190611c2d565b6105a0565b6040516101b19190611c73565b60405180910390f35b3480156101c657600080fd5b506101e160048036038101906101dc9190611ccc565b61066d565b6040516101ee9190611d0c565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190611d27565b61079f565b005b34801561022c57600080fd5b5061023561090e565b6040516102429190611d0c565b60405180910390f35b34801561025757600080fd5b50610272600480360381019061026d9190611d93565b610916565b60405161027f9190611e1f565b60405180910390f35b34801561029457600080fd5b5061029d610955565b6040516102aa9190611d0c565b60405180910390f35b3480156102bf57600080fd5b506102c8610962565b005b3480156102d657600080fd5b506102df610ac9565b005b3480156102ed57600080fd5b5061030860048036038101906103039190611e3a565b610b51565b005b34801561031657600080fd5b5061031f610e91565b60405161032c9190611e7a565b60405180910390f35b34801561034157600080fd5b5061034a610eba565b6040516103579190611d0c565b60405180910390f35b34801561036c57600080fd5b5061038760048036038101906103829190611e95565b610f40565b6040516103949190611e7a565b60405180910390f35b3480156103a957600080fd5b506103b2610f73565b6040516103bf9190611d0c565b60405180910390f35b3480156103d457600080fd5b506103ef60048036038101906103ea9190611c2d565b610f80565b6040516103fc9190611d0c565b60405180910390f35b34801561041157600080fd5b5061042c60048036038101906104279190611d27565b610f98565b6040516104399190611d0c565b60405180910390f35b34801561044e57600080fd5b5061046960048036038101906104649190611c2d565b610fbd565b6040516104769190611d0c565b60405180910390f35b34801561048b57600080fd5b506104a660048036038101906104a19190611e3a565b611093565b005b3480156104b457600080fd5b506104bd611579565b005b3480156104cb57600080fd5b506104e660048036038101906104e19190611e95565b611627565b6040516104f4929190611ede565b60405180910390f35b34801561050957600080fd5b50610524600480360381019061051f9190611c2d565b6117d3565b005b34801561053257600080fd5b5061054d60048036038101906105489190611e95565b6118cb565b60405161055a9190611f22565b60405180910390f35b34801561056f57600080fd5b5061058a60048036038101906105859190611d93565b61197a565b6040516105979190611e7a565b60405180910390f35b600080600090505b600480549050811015610643578273ffffffffffffffffffffffffffffffffffffffff16600482815481106105e0576105df611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106305780915050610668565b808061063b90611f9b565b9150506105a8565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90505b919050565b600081610679816118cb565b6106b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106af90612041565b60405180910390fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081141561074c576000925050610798565b60008061075886611627565b91509150670de0b6b3a764000081600a6107729190612194565b848461077e91906121df565b6107889190612268565b6107929190612268565b94505050505b5092915050565b6107a76119b9565b73ffffffffffffffffffffffffffffffffffffffff166107c5610e91565b73ffffffffffffffffffffffffffffffffffffffff161461081b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610812906122e5565b60405180910390fd5b610824826118cb565b61088c576005829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600047905090565b6005818154811061092657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600480549050905090565b61096a6119b9565b73ffffffffffffffffffffffffffffffffffffffff16610988610e91565b73ffffffffffffffffffffffffffffffffffffffff16146109de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d5906122e5565b60405180910390fd5b6109e6610eba565b471015610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f90612377565b60405180910390fd5b60005b600480549050811015610ac657600060048281548110610a4e57610a4d611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610a8682610fbd565b9050610ab1818373ffffffffffffffffffffffffffffffffffffffff166119c190919063ffffffff16565b50508080610abe90611f9b565b915050610a2b565b50565b610ad16119b9565b73ffffffffffffffffffffffffffffffffffffffff16610aef610e91565b73ffffffffffffffffffffffffffffffffffffffff1614610b45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3c906122e5565b60405180910390fd5b610b4f6000611ab5565b565b81610b5b816118cb565b610b9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9190612041565b60405180910390fd5b60008211610bdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd490612409565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd610c016119b9565b30856040518463ffffffff1660e01b8152600401610c2193929190612429565b6020604051808303816000875af1158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c64919061248c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610c96610c916119b9565b6105a0565b1415610d07576004610ca66119b9565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610d526119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415610df257600160026000610da16119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610dea91906124b9565b925050819055505b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610e3c6119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e8591906124b9565b92505081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806000905060005b600480549050811015610f3857610f1860048281548110610ee857610ee7611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610fbd565b82610f2391906124b9565b91508080610f3090611f9b565b915050610ec4565b508091505090565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600580549050905090565b60026020528060005260406000206000915090505481565b6001602052816000526040600020602052806000526040600020600091509150505481565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561100f576000905061108e565b6000805b60058054905081101561108857611068846005838154811061103857611037611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661066d565b8261107391906124b9565b9150808061108090611f9b565b915050611013565b50809150505b919050565b8161109d816118cb565b6110dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d390612041565b60405180910390fd5b6000821161111f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111690612409565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006111696119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111dc90612581565b60405180910390fd5b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061122f6119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461127891906125a1565b925050819055506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006112ca6119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561136a576001600260006113196119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461136291906125a1565b925050819055505b600061137c6113776119b9565b6105a0565b905060006002600061138c6119b9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541480156113f457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b156114ed576004600160048054905061140d91906125a1565b8154811061141e5761141d611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166004828154811061145d5761145c611f3d565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060048054806114b7576114b66125d5565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b8373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6115116119b9565b856040518363ffffffff1660e01b815260040161152f929190611bd3565b6020604051808303816000875af115801561154e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611572919061248c565b5050505050565b6115816119b9565b73ffffffffffffffffffffffffffffffffffffffff1661159f610e91565b73ffffffffffffffffffffffffffffffffffffffff16146115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec906122e5565b60405180910390fd5b61162547611601610e91565b73ffffffffffffffffffffffffffffffffffffffff166119c190919063ffffffff16565b565b60008082611634816118cb565b611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166a90612041565b60405180910390fd5b6000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008190508073ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174b9190612687565b9091929350909150905050809550508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c9919061272e565b9350505050915091565b6117db6119b9565b73ffffffffffffffffffffffffffffffffffffffff166117f9610e91565b73ffffffffffffffffffffffffffffffffffffffff161461184f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611846906122e5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156118bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b6906127cd565b60405180910390fd5b6118c881611ab5565b50565b600080600090505b60058054905081101561196f57600581815481106118f4576118f3611f3d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561195c576001915050611975565b808061196790611f9b565b9150506118d3565b50600090505b919050565b6004818154811061198a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b80471015611a04576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119fb90612839565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1682604051611a2a9061288a565b60006040518083038185875af1925050503d8060008114611a67576040519150601f19603f3d011682016040523d82523d6000602084013e611a6c565b606091505b5050905080611ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa790612911565b60405180910390fd5b505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ba482611b79565b9050919050565b611bb481611b99565b82525050565b6000819050919050565b611bcd81611bba565b82525050565b6000604082019050611be86000830185611bab565b611bf56020830184611bc4565b9392505050565b600080fd5b611c0a81611b99565b8114611c1557600080fd5b50565b600081359050611c2781611c01565b92915050565b600060208284031215611c4357611c42611bfc565b5b6000611c5184828501611c18565b91505092915050565b6000819050919050565b611c6d81611c5a565b82525050565b6000602082019050611c886000830184611c64565b92915050565b6000611c9982611b99565b9050919050565b611ca981611c8e565b8114611cb457600080fd5b50565b600081359050611cc681611ca0565b92915050565b60008060408385031215611ce357611ce2611bfc565b5b6000611cf185828601611c18565b9250506020611d0285828601611cb7565b9150509250929050565b6000602082019050611d216000830184611bc4565b92915050565b60008060408385031215611d3e57611d3d611bfc565b5b6000611d4c85828601611cb7565b9250506020611d5d85828601611c18565b9150509250929050565b611d7081611bba565b8114611d7b57600080fd5b50565b600081359050611d8d81611d67565b92915050565b600060208284031215611da957611da8611bfc565b5b6000611db784828501611d7e565b91505092915050565b6000819050919050565b6000611de5611de0611ddb84611b79565b611dc0565b611b79565b9050919050565b6000611df782611dca565b9050919050565b6000611e0982611dec565b9050919050565b611e1981611dfe565b82525050565b6000602082019050611e346000830184611e10565b92915050565b60008060408385031215611e5157611e50611bfc565b5b6000611e5f85828601611cb7565b9250506020611e7085828601611d7e565b9150509250929050565b6000602082019050611e8f6000830184611bab565b92915050565b600060208284031215611eab57611eaa611bfc565b5b6000611eb984828501611cb7565b91505092915050565b600060ff82169050919050565b611ed881611ec2565b82525050565b6000604082019050611ef36000830185611c64565b611f006020830184611ecf565b9392505050565b60008115159050919050565b611f1c81611f07565b82525050565b6000602082019050611f376000830184611f13565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fa682611bba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611fd957611fd8611f6c565b5b600182019050919050565b600082825260208201905092915050565b7f546f6b656e206973206e6f7420616c6c6f776564000000000000000000000000600082015250565b600061202b601483611fe4565b915061203682611ff5565b602082019050919050565b6000602082019050818103600083015261205a8161201e565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156120b85780860481111561209457612093611f6c565b5b60018516156120a35780820291505b80810290506120b185612061565b9450612078565b94509492505050565b6000826120d1576001905061218d565b816120df576000905061218d565b81600181146120f557600281146120ff5761212e565b600191505061218d565b60ff84111561211157612110611f6c565b5b8360020a91508482111561212857612127611f6c565b5b5061218d565b5060208310610133831016604e8410600b84101617156121635782820a90508381111561215e5761215d611f6c565b5b61218d565b612170848484600161206e565b9250905081840481111561218757612186611f6c565b5b81810290505b9392505050565b600061219f82611bba565b91506121aa83611ec2565b92506121d77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846120c1565b905092915050565b60006121ea82611bba565b91506121f583611bba565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561222e5761222d611f6c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061227382611bba565b915061227e83611bba565b92508261228e5761228d612239565b5b828204905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006122cf602083611fe4565b91506122da82612299565b602082019050919050565b600060208201905081810360008301526122fe816122c2565b9050919050565b7f436f6e74726163742068617320696e73756666696369656e742045544820666f60008201527f7220746f6b656e2069737375616e636500000000000000000000000000000000602082015250565b6000612361603083611fe4565b915061236c82612305565b604082019050919050565b6000602082019050818103600083015261239081612354565b9050919050565b7f5374616b696e6720616d6f756e74206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b60006123f3602583611fe4565b91506123fe82612397565b604082019050919050565b60006020820190508181036000830152612422816123e6565b9050919050565b600060608201905061243e6000830186611bab565b61244b6020830185611bab565b6124586040830184611bc4565b949350505050565b61246981611f07565b811461247457600080fd5b50565b60008151905061248681612460565b92915050565b6000602082840312156124a2576124a1611bfc565b5b60006124b084828501612477565b91505092915050565b60006124c482611bba565b91506124cf83611bba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561250457612503611f6c565b5b828201905092915050565b7f5374616b65642062616c616e6365206973206c6f776572207468616e20756e7360008201527f74616b696e6720616d6f756e7400000000000000000000000000000000000000602082015250565b600061256b602d83611fe4565b91506125768261250f565b604082019050919050565b6000602082019050818103600083015261259a8161255e565b9050919050565b60006125ac82611bba565b91506125b783611bba565b9250828210156125ca576125c9611f6c565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600069ffffffffffffffffffff82169050919050565b61262381612604565b811461262e57600080fd5b50565b6000815190506126408161261a565b92915050565b61264f81611c5a565b811461265a57600080fd5b50565b60008151905061266c81612646565b92915050565b60008151905061268181611d67565b92915050565b600080600080600060a086880312156126a3576126a2611bfc565b5b60006126b188828901612631565b95505060206126c28882890161265d565b94505060406126d388828901612672565b93505060606126e488828901612672565b92505060806126f588828901612631565b9150509295509295909350565b61270b81611ec2565b811461271657600080fd5b50565b60008151905061272881612702565b92915050565b60006020828403121561274457612743611bfc565b5b600061275284828501612719565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006127b7602683611fe4565b91506127c28261275b565b604082019050919050565b600060208201905081810360008301526127e6816127aa565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b6000612823601d83611fe4565b915061282e826127ed565b602082019050919050565b6000602082019050818103600083015261285281612816565b9050919050565b600081905092915050565b50565b6000612874600083612859565b915061287f82612864565b600082019050919050565b600061289582612867565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b60006128fb603a83611fe4565b91506129068261289f565b604082019050919050565b6000602082019050818103600083015261292a816128ee565b905091905056fea2646970667358221220720978ec049d1dd4b6eb76fe68830b1cf026fd14fa60103180eae73c5655419164736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1136,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingBalances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)774,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1140,
        "contract": "contracts/Staking.sol:Staking",
        "label": "uniqueTokensStaked",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1145,
        "contract": "contracts/Staking.sol:Staking",
        "label": "tokenPriceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_contract(IERC20)774,t_address)"
      },
      {
        "astId": 1148,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakers",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1152,
        "contract": "contracts/Staking.sol:Staking",
        "label": "allowedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(IERC20)774)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)774)dyn_storage": {
        "base": "t_contract(IERC20)774",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)774": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)774,t_address)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)774",
        "label": "mapping(contract IERC20 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_contract(IERC20)774,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)774",
        "label": "mapping(contract IERC20 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}